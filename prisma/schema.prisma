// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id
  email    String
  name     String
  timeZone String  @default("America/New_York") @map("time_zone")
  imageUrl String? @map("image_url")

  availability        Availability[]
  interviewsAsInvitee Interview[]        @relation("Invitee")
  interviewsAsInviter Interview[]        @relation("Inviter")
  questionTypes       QuestionType[]     @map("question_types")
  questionDifficulty  QuestionDifficulty @default(EASY) @map("question_difficulty")
  codingLanguage      CodingLanguage[]   @map("coding_languages")

  @@map(name: "users")
}

model Availability {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  startTime DateTime @map("start_time")
  isTaken   Boolean  @default(false) @map("is_taken")

  @@unique([userId, startTime])
  @@map(name: "availability")
}

model Interview {
  id        String              @id @default(uuid())
  inviterId String              @map("inviter_id")
  inviter   User                @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId String              @map("invitee_id")
  invitee   User                @relation("Invitee", fields: [inviteeId], references: [id])
  startTime DateTime            @map("start_time")
  status    InterviewStatus     @default(NOT_INITIALIZED)
  questions InterviewQuestion[]

  @@map(name: "interviews")
}

model InterviewQuestion {
  id                 String             @id
  questionName       String             @map("question_name")
  questionText       String             @map("question_text")
  answerText         String             @map("answer_text")
  questionDifficulty QuestionDifficulty @map("question_difficulty")
  questionType       QuestionType[]     @map("question_type")
  interviews         Interview[]

  @@map(name: "interview_questions")
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD

  @@map("question_difficulty")
}

enum QuestionType {
  ARRAY
  LINKED_LIST

  @@map("question_type")
}

enum InterviewStatus {
  NOT_INITIALIZED
  INVITED
  CONFIRMED
  COMPLETED
  CANCELLED

  @@map("interview_status")
}

enum CodingLanguage {
  PYTHON
  JAVA
  JAVASCRIPT

  @@map("coding_language")
}
